// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// stopover_for_loop
NumericVector stopover_for_loop(NumericVector betas, NumericVector phi);
RcppExport SEXP _GAI_stopover_for_loop(SEXP betasSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(stopover_for_loop(betas, phi));
    return rcpp_result_gen;
END_RCPP
}
// weightedSelection
NumericVector weightedSelection(NumericVector x, NumericVector probs);
RcppExport SEXP _GAI_weightedSelection(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedSelection(x, probs));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _GAI_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GAI_stopover_for_loop", (DL_FUNC) &_GAI_stopover_for_loop, 2},
    {"_GAI_weightedSelection", (DL_FUNC) &_GAI_weightedSelection, 2},
    {"_GAI_rcpp_hello_world", (DL_FUNC) &_GAI_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_GAI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
